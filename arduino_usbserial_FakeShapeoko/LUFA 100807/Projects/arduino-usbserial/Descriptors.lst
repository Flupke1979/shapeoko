   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB66:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
   4:Descriptors.c ****               
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****       www.fourwalledcubicle.com
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in 
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting 
  17:Descriptors.c ****   documentation, and that the name of the author not be used in 
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the 
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special 
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.  
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /* On some devices, there is a factory set internal serial number which can be automatically sent t
  41:Descriptors.c ****  * the device's serial number when the Device Descriptor's .SerialNumStrIndex entry is set to USE_I
  42:Descriptors.c ****  * This allows the host to track a device across insertions on different ports, allowing them to re
  43:Descriptors.c ****  * resources like COM port numbers and drivers. On demos using this feature, give a warning on unsu
  44:Descriptors.c ****  * so that the user can supply their own serial number descriptor instead or remove the USE_INTERNA
  45:Descriptors.c ****  * from the Device Descriptor (forcing the host to generate a serial number for each device from th
  46:Descriptors.c ****  * port location).
  47:Descriptors.c ****  */
  48:Descriptors.c **** #if (USE_INTERNAL_SERIAL == NO_DESCRIPTOR)
  49:Descriptors.c **** 	#warning USE_INTERNAL_SERIAL is not available on this AVR - please manually construct a device ser
  50:Descriptors.c **** #endif
  51:Descriptors.c **** 
  52:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  53:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  54:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  55:Descriptors.c ****  *  process begins.
  56:Descriptors.c ****  */
  57:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  58:Descriptors.c **** {
  59:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  60:Descriptors.c **** 		
  61:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  62:Descriptors.c **** 	.Class                  = 0x02,
  63:Descriptors.c **** 	.SubClass               = 0x00,
  64:Descriptors.c **** 	.Protocol               = 0x00,
  65:Descriptors.c **** 				
  66:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  67:Descriptors.c **** 		
  68:Descriptors.c **** 	//.VendorID               = 0x03EB, // Atmel
  69:Descriptors.c **** 	.VendorID               = 0x16D0, // Carbide3D
  70:Descriptors.c **** 
  71:Descriptors.c **** 	//.ProductID          	= 0x204B, // LUFA USB to Serial Demo Application
  72:Descriptors.c **** 	.ProductID          	= 0x0AD8, // Shapeoko
  73:Descriptors.c **** 	.ReleaseNumber          = 0x0001,
  74:Descriptors.c **** 		
  75:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
  76:Descriptors.c **** 	.ProductStrIndex        = 0x02,
  77:Descriptors.c **** 	.SerialNumStrIndex      = USE_INTERNAL_SERIAL,
  78:Descriptors.c **** 		
  79:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  80:Descriptors.c **** };
  81:Descriptors.c **** 
  82:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  83:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  84:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  85:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  86:Descriptors.c ****  */
  87:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
  88:Descriptors.c **** {
  89:Descriptors.c **** 	.Config = 
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  94:Descriptors.c **** 			.TotalInterfaces        = 2,
  95:Descriptors.c **** 				
  96:Descriptors.c **** 			.ConfigurationNumber    = 1,
  97:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  98:Descriptors.c **** 				
  99:Descriptors.c **** 			.ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
 100:Descriptors.c **** 			
 101:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
 102:Descriptors.c **** 		},
 103:Descriptors.c **** 		
 104:Descriptors.c **** 	.CDC_CCI_Interface = 
 105:Descriptors.c **** 		{
 106:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 107:Descriptors.c **** 
 108:Descriptors.c **** 			.InterfaceNumber        = 0,
 109:Descriptors.c **** 			.AlternateSetting       = 0,
 110:Descriptors.c **** 			
 111:Descriptors.c **** 			.TotalEndpoints         = 1,
 112:Descriptors.c **** 				
 113:Descriptors.c **** 			.Class                  = 0x02,
 114:Descriptors.c **** 			.SubClass               = 0x02,
 115:Descriptors.c **** 			.Protocol               = 0x01,
 116:Descriptors.c **** 				
 117:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 118:Descriptors.c **** 		},
 119:Descriptors.c **** 
 120:Descriptors.c **** 	.CDC_Functional_IntHeader = 
 121:Descriptors.c **** 		{
 122:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(2)), .Type = 0x24},
 123:Descriptors.c **** 			.SubType                = 0x00,
 124:Descriptors.c **** 			
 125:Descriptors.c **** 			.Data                   = {0x01, 0x10}
 126:Descriptors.c **** 		},
 127:Descriptors.c **** 
 128:Descriptors.c **** 	.CDC_Functional_AbstractControlManagement = 
 129:Descriptors.c **** 		{
 130:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(1)), .Type = 0x24},
 131:Descriptors.c **** 			.SubType                = 0x02,
 132:Descriptors.c **** 			
 133:Descriptors.c **** 			.Data                   = {0x06}
 134:Descriptors.c **** 		},
 135:Descriptors.c **** 		
 136:Descriptors.c **** 	.CDC_Functional_Union = 
 137:Descriptors.c **** 		{
 138:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(2)), .Type = 0x24},
 139:Descriptors.c **** 			.SubType                = 0x06,
 140:Descriptors.c **** 			
 141:Descriptors.c **** 			.Data                   = {0x00, 0x01}
 142:Descriptors.c **** 		},
 143:Descriptors.c **** 
 144:Descriptors.c **** 	.CDC_NotificationEndpoint = 
 145:Descriptors.c **** 		{
 146:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 147:Descriptors.c **** 			
 148:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_NOTIFICATION_EPNUM),
 149:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 150:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 151:Descriptors.c **** 			.PollingIntervalMS      = 0xFF
 152:Descriptors.c **** 		},
 153:Descriptors.c **** 
 154:Descriptors.c **** 	.CDC_DCI_Interface = 
 155:Descriptors.c **** 		{
 156:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 157:Descriptors.c **** 
 158:Descriptors.c **** 			.InterfaceNumber        = 1,
 159:Descriptors.c **** 			.AlternateSetting       = 0,
 160:Descriptors.c **** 			
 161:Descriptors.c **** 			.TotalEndpoints         = 2,
 162:Descriptors.c **** 				
 163:Descriptors.c **** 			.Class                  = 0x0A,
 164:Descriptors.c **** 			.SubClass               = 0x00,
 165:Descriptors.c **** 			.Protocol               = 0x00,
 166:Descriptors.c **** 				
 167:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 168:Descriptors.c **** 		},
 169:Descriptors.c **** 
 170:Descriptors.c **** 	.CDC_DataOutEndpoint = 
 171:Descriptors.c **** 		{
 172:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 173:Descriptors.c **** 			
 174:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_OUT | CDC_RX_EPNUM),
 175:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 176:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 177:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 178:Descriptors.c **** 		},
 179:Descriptors.c **** 		
 180:Descriptors.c **** 	.CDC_DataInEndpoint = 
 181:Descriptors.c **** 		{
 182:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 183:Descriptors.c **** 			
 184:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_TX_EPNUM),
 185:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 186:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 187:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 188:Descriptors.c **** 		}
 189:Descriptors.c **** };
 190:Descriptors.c **** 
 191:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 192:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 193:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 194:Descriptors.c ****  */
 195:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 196:Descriptors.c **** {
 197:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 198:Descriptors.c **** 		
 199:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 200:Descriptors.c **** };
 201:Descriptors.c **** 
 202:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 203:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 204:Descriptors.c ****  *  Descriptor.
 205:Descriptors.c ****  */
 206:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 207:Descriptors.c **** {
 208:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(24), .Type = DTYPE_String},
 209:Descriptors.c **** 		
 210:Descriptors.c **** 	.UnicodeString          = L"Arduino (www.arduino.cc)"
 211:Descriptors.c **** };
 212:Descriptors.c **** 
 213:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 214:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 215:Descriptors.c ****  *  Descriptor.
 216:Descriptors.c ****  */
 217:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 218:Descriptors.c **** {
 219:Descriptors.c **** 	#if (ARDUINO_MODEL_PID == ARDUINO_UNO_PID)
 220:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 221:Descriptors.c **** 			
 222:Descriptors.c **** 		.UnicodeString          = L"Arduino Uno"
 223:Descriptors.c **** 	#elif (ARDUINO_MODEL_PID == ARDUINO_MEGA2560_PID)
 224:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(17), .Type = DTYPE_String},
 225:Descriptors.c **** 			
 226:Descriptors.c **** 		.UnicodeString          = L"Arduino Mega 2560"
 227:Descriptors.c **** 	#endif
 228:Descriptors.c **** 	
 229:Descriptors.c **** };
 230:Descriptors.c **** 
 231:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 232:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 233:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 234:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 235:Descriptors.c ****  *  USB host.
 236:Descriptors.c ****  */
 237:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 238:Descriptors.c ****                                     const uint8_t wIndex,
 239:Descriptors.c ****                                     void** const DescriptorAddress)
 240:Descriptors.c **** {
  16               		.loc 1 240 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 241:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 241 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 242:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 243:Descriptors.c **** 
 244:Descriptors.c **** 	void*    Address = NULL;
 245:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 246:Descriptors.c **** 
 247:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 247 0
  27 0004 2230      		cpi r18,2
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 2330      		cpi r18,3
  31 000c 3105      		cpc r19,__zero_reg__
  32 000e 01F0      		breq .L4
  33 0010 2130      		cpi r18,1
  34 0012 3105      		cpc r19,__zero_reg__
  35 0014 01F4      		brne .L12
 248:Descriptors.c **** 	{
 249:Descriptors.c **** 		case DTYPE_Device: 
 250:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 251:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  36               		.loc 1 251 0
  37 0016 82E1      		ldi r24,lo8(18)
  38 0018 90E0      		ldi r25,0
  39               	.LVL1:
 250:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  40               		.loc 1 250 0
  41 001a 20E0      		ldi r18,lo8(DeviceDescriptor)
  42 001c 30E0      		ldi r19,hi8(DeviceDescriptor)
  43 001e 00C0      		rjmp .L2
  44               	.LVL2:
  45               	.L3:
 252:Descriptors.c **** 			break;
 253:Descriptors.c **** 		case DTYPE_Configuration: 
 254:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
 255:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  46               		.loc 1 255 0
  47 0020 8EE3      		ldi r24,lo8(62)
  48 0022 90E0      		ldi r25,0
  49               	.LVL3:
 254:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  50               		.loc 1 254 0
  51 0024 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  52 0026 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 256:Descriptors.c **** 			break;
  53               		.loc 1 256 0
  54 0028 00C0      		rjmp .L2
  55               	.LVL4:
  56               	.L4:
  57 002a 9927      		clr r25
  58               	.LVL5:
 257:Descriptors.c **** 		case DTYPE_String: 
 258:Descriptors.c **** 			switch (DescriptorNumber)
  59               		.loc 1 258 0
  60 002c 8130      		cpi r24,1
  61 002e 9105      		cpc r25,__zero_reg__
  62 0030 01F0      		breq .L6
  63 0032 8230      		cpi r24,2
  64 0034 9105      		cpc r25,__zero_reg__
  65 0036 01F0      		breq .L7
  66 0038 892B      		or r24,r25
  67 003a 01F4      		brne .L12
  68               	.LVL6:
  69               	.LBB2:
 259:Descriptors.c **** 			{
 260:Descriptors.c **** 				case 0x00: 
 261:Descriptors.c **** 					Address = (void*)&LanguageString;
 262:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
  70               		.loc 1 262 0
  71 003c E0E0      		ldi r30,lo8(LanguageString)
  72 003e F0E0      		ldi r31,hi8(LanguageString)
  73 0040 00C0      		rjmp .L13
  74               	.LVL7:
  75               	.L6:
  76               	.LBE2:
  77               	.LBB3:
 263:Descriptors.c **** 					break;
 264:Descriptors.c **** 				case 0x01: 
 265:Descriptors.c **** 					Address = (void*)&ManufacturerString;
 266:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
  78               		.loc 1 266 0
  79 0042 E0E0      		ldi r30,lo8(ManufacturerString)
  80 0044 F0E0      		ldi r31,hi8(ManufacturerString)
  81 0046 00C0      		rjmp .L13
  82               	.LVL8:
  83               	.L7:
  84               	.LBE3:
  85               	.LBB4:
 267:Descriptors.c **** 					break;
 268:Descriptors.c **** 				case 0x02: 
 269:Descriptors.c **** 					Address = (void*)&ProductString;
 270:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
  86               		.loc 1 270 0
  87 0048 E0E0      		ldi r30,lo8(ProductString)
  88 004a F0E0      		ldi r31,hi8(ProductString)
  89               	.LVL9:
  90               	.L13:
  91               	/* #APP */
  92               	 ;  270 "Descriptors.c" 1
  93 004c 8491      		lpm r24, Z
  94               		
  95               	 ;  0 "" 2
  96               	.LVL10:
  97               	/* #NOAPP */
  98               	.LBE4:
  99 004e 90E0      		ldi r25,0
 100               	.LVL11:
 269:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 101               		.loc 1 269 0
 102 0050 9F01      		movw r18,r30
 271:Descriptors.c **** 					break;
 103               		.loc 1 271 0
 104 0052 00C0      		rjmp .L2
 105               	.LVL12:
 106               	.L12:
 245:Descriptors.c **** 
 107               		.loc 1 245 0
 108 0054 80E0      		ldi r24,0
 109 0056 90E0      		ldi r25,0
 244:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 110               		.loc 1 244 0
 111 0058 20E0      		ldi r18,0
 112 005a 30E0      		ldi r19,0
 113               	.LVL13:
 114               	.L2:
 272:Descriptors.c **** 			}
 273:Descriptors.c **** 			
 274:Descriptors.c **** 			break;
 275:Descriptors.c **** 	}
 276:Descriptors.c **** 	
 277:Descriptors.c **** 	*DescriptorAddress = Address;
 115               		.loc 1 277 0
 116 005c FA01      		movw r30,r20
 117 005e 3183      		std Z+1,r19
 118 0060 2083      		st Z,r18
 278:Descriptors.c **** 	return Size;
 279:Descriptors.c **** }
 119               		.loc 1 279 0
 120 0062 0895      		ret
 121               		.cfi_endproc
 122               	.LFE66:
 124               	.global	ProductString
 125               		.section	.progmem.data,"a",@progbits
 128               	ProductString:
 129 0000 18        		.byte	24
 130 0001 03        		.byte	3
 131 0002 4100      		.string	"A"
 132 0004 7200      		.string	"r"
 133 0006 6400      		.string	"d"
 134 0008 7500      		.string	"u"
 135 000a 6900      		.string	"i"
 136 000c 6E00      		.string	"n"
 137 000e 6F00      		.string	"o"
 138 0010 2000      		.string	" "
 139 0012 5500      		.string	"U"
 140 0014 6E00      		.string	"n"
 141 0016 6F00      		.string	"o"
 142 0018 00        		.string	""
 143 0019 00        		.string	""
 144               	.global	ManufacturerString
 147               	ManufacturerString:
 148 001a 32        		.byte	50
 149 001b 03        		.byte	3
 150 001c 4100      		.string	"A"
 151 001e 7200      		.string	"r"
 152 0020 6400      		.string	"d"
 153 0022 7500      		.string	"u"
 154 0024 6900      		.string	"i"
 155 0026 6E00      		.string	"n"
 156 0028 6F00      		.string	"o"
 157 002a 2000      		.string	" "
 158 002c 2800      		.string	"("
 159 002e 7700      		.string	"w"
 160 0030 7700      		.string	"w"
 161 0032 7700      		.string	"w"
 162 0034 2E00      		.string	"."
 163 0036 6100      		.string	"a"
 164 0038 7200      		.string	"r"
 165 003a 6400      		.string	"d"
 166 003c 7500      		.string	"u"
 167 003e 6900      		.string	"i"
 168 0040 6E00      		.string	"n"
 169 0042 6F00      		.string	"o"
 170 0044 2E00      		.string	"."
 171 0046 6300      		.string	"c"
 172 0048 6300      		.string	"c"
 173 004a 2900      		.string	")"
 174 004c 00        		.string	""
 175 004d 00        		.string	""
 176               	.global	LanguageString
 179               	LanguageString:
 180 004e 04        		.byte	4
 181 004f 03        		.byte	3
 182 0050 0904      		.word	1033
 183               	.global	ConfigurationDescriptor
 186               	ConfigurationDescriptor:
 187 0052 09        		.byte	9
 188 0053 02        		.byte	2
 189 0054 3E00      		.word	62
 190 0056 02        		.byte	2
 191 0057 01        		.byte	1
 192 0058 00        		.byte	0
 193 0059 C0        		.byte	-64
 194 005a 32        		.byte	50
 195 005b 09        		.byte	9
 196 005c 04        		.byte	4
 197 005d 00        		.byte	0
 198 005e 00        		.byte	0
 199 005f 01        		.byte	1
 200 0060 02        		.byte	2
 201 0061 02        		.byte	2
 202 0062 01        		.byte	1
 203 0063 00        		.byte	0
 204 0064 05        		.byte	5
 205 0065 24        		.byte	36
 206 0066 00        		.byte	0
 207 0067 01        		.byte	1
 208 0068 10        		.byte	16
 209 0069 04        		.byte	4
 210 006a 24        		.byte	36
 211 006b 02        		.byte	2
 212 006c 06        		.byte	6
 213 006d 05        		.byte	5
 214 006e 24        		.byte	36
 215 006f 06        		.byte	6
 216 0070 00        		.byte	0
 217 0071 01        		.byte	1
 218 0072 07        		.byte	7
 219 0073 05        		.byte	5
 220 0074 82        		.byte	-126
 221 0075 03        		.byte	3
 222 0076 0800      		.word	8
 223 0078 FF        		.byte	-1
 224 0079 09        		.byte	9
 225 007a 04        		.byte	4
 226 007b 01        		.byte	1
 227 007c 00        		.byte	0
 228 007d 02        		.byte	2
 229 007e 0A        		.byte	10
 230 007f 00        		.byte	0
 231 0080 00        		.byte	0
 232 0081 00        		.byte	0
 233 0082 07        		.byte	7
 234 0083 05        		.byte	5
 235 0084 04        		.byte	4
 236 0085 02        		.byte	2
 237 0086 4000      		.word	64
 238 0088 01        		.byte	1
 239 0089 07        		.byte	7
 240 008a 05        		.byte	5
 241 008b 83        		.byte	-125
 242 008c 02        		.byte	2
 243 008d 4000      		.word	64
 244 008f 01        		.byte	1
 245               	.global	DeviceDescriptor
 248               	DeviceDescriptor:
 249 0090 12        		.byte	18
 250 0091 01        		.byte	1
 251 0092 1001      		.word	272
 252 0094 02        		.byte	2
 253 0095 00        		.byte	0
 254 0096 00        		.byte	0
 255 0097 08        		.byte	8
 256 0098 D016      		.word	5840
 257 009a D80A      		.word	2776
 258 009c 0100      		.word	1
 259 009e 01        		.byte	1
 260 009f 02        		.byte	2
 261 00a0 DC        		.byte	-36
 262 00a1 01        		.byte	1
 263               		.text
 264               	.Letext0:
 265               		.file 2 "c:\\program files (x86)\\arduino\\hardware\\tools\\avr\\avr\\include\\stdint.h"
 266               		.file 3 "c:\\program files (x86)\\arduino\\hardware\\tools\\avr\\lib\\gcc\\avr\\4.9.2\\include\\st
 267               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 268               		.file 5 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Descriptors.c
C:\Users\Julien\AppData\Local\Temp\cct8P1gs.s:2      *ABS*:0000003e __SP_H__
C:\Users\Julien\AppData\Local\Temp\cct8P1gs.s:3      *ABS*:0000003d __SP_L__
C:\Users\Julien\AppData\Local\Temp\cct8P1gs.s:4      *ABS*:0000003f __SREG__
C:\Users\Julien\AppData\Local\Temp\cct8P1gs.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Julien\AppData\Local\Temp\cct8P1gs.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Julien\AppData\Local\Temp\cct8P1gs.s:13     .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
C:\Users\Julien\AppData\Local\Temp\cct8P1gs.s:248    .progmem.data:00000090 DeviceDescriptor
C:\Users\Julien\AppData\Local\Temp\cct8P1gs.s:186    .progmem.data:00000052 ConfigurationDescriptor
C:\Users\Julien\AppData\Local\Temp\cct8P1gs.s:179    .progmem.data:0000004e LanguageString
C:\Users\Julien\AppData\Local\Temp\cct8P1gs.s:147    .progmem.data:0000001a ManufacturerString
C:\Users\Julien\AppData\Local\Temp\cct8P1gs.s:128    .progmem.data:00000000 ProductString

NO UNDEFINED SYMBOLS
